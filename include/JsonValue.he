/* JSON VALUE (HEADER)
 * 
 * This wraps the behaviour of the Json::Value class
 *
 * NOTE: All headers for external components must have the .he extension instead of the standard .h
 *       To enable code-highliting in Visual Studio 2008 go to Tools->Options-Text Editor-File Extension 
 *       and add "he" as a "Microsoft Visual C++" experience.
 *
 * October 2, 2010 David McKeone (Created)
 */

//Omnis includes
#include <extcomp.he>
#include "NVObjBase.he"
#include "OmnisTools.he"

//Boost includes
#include <Boost/smart_ptr.hpp>

// jsoncpp includes
#include "json/value.h"

typedef unsigned int UInt;

#ifndef JSON_VALUE_HE
#define JSON_VALUE_HE

using OmnisTools::tThreadData;

// Class definition for C++ version of your object
class JsonValue : public NVObjBase
{
public:		
	// Static tracking variable
	static qshort objResourceId;
	
	// Constructor / Destructor
	JsonValue( qobjinst objinst );
	JsonValue( qobjinst objinst, tThreadData *pThreadData );
	virtual ~JsonValue();
	
	// Omnis Copy
	virtual void copy( NVObjBase* pObj );
	
	// C++ only methods
	Json::Value& getJsonValue();
	void setJsonValue(boost::shared_ptr<Json::Value> newValue);
	void setJsonValue(boost::shared_ptr<Json::Value> newValue, Json::Value* posPointer);
	
	// Methods Available and Method Call Handling
	virtual qlong returnMethods( tThreadData* pThreadData );
	virtual qlong methodCall( tThreadData* pThreadData );

	// Properties and Property Call Handling
	virtual qlong returnProperties( tThreadData* pThreadData );
	virtual qlong getProperty( tThreadData* pThreadData );
	virtual qlong setProperty( tThreadData* pThreadData );
	virtual qlong canAssignProperty( tThreadData* pThreadData, qlong propID );

private:
	boost::shared_ptr<Json::Value> document; // Pointer to the root of the document, shared pointer for easy life-time management.
	Json::Value *jsonValue; // Pointer to the current position in the object
	
	// Returns the value type constant of the value
	void propertyValueType(EXTfldval&);
	void propertyValueTypeDesc(EXTfldval&);
	
	// $contents property
	void getPropertyContents(EXTfldval&, tThreadData*);
	
	// Wrapped Methods
	// Initialization
	void methodConstruct( tThreadData*, qshort );
	void methodInitialize( tThreadData*, qshort );
	
	// Type Detection
	void methodIsNull( tThreadData*, qshort );
	void methodIsBool( tThreadData*, qshort );
	void methodIsInt( tThreadData*, qshort );
	void methodIsUInt( tThreadData*, qshort );
	void methodIsIntegral( tThreadData*, qshort );
	void methodIsDouble( tThreadData*, qshort );
	void methodIsNumeric( tThreadData*, qshort );
	void methodIsString( tThreadData*, qshort );
	void methodIsArray( tThreadData*, qshort );
	void methodIsObject( tThreadData*, qshort );
	
	// Retrieval
	void methodGet( tThreadData*, qshort );
	void methodCopy( tThreadData*, qshort );
	void methodRoot( tThreadData*, qshort );
	
	// Array
	void methodSize( tThreadData*, qshort );
	void methodEmpty( tThreadData*, qshort );
	void methodClear( tThreadData*, qshort );
	void methodIsValidIndex( tThreadData*, qshort );
	
	// Object
	void methodIsMember( tThreadData*, qshort );
	void methodGetMemberNames( tThreadData*, qshort );
	
	// Assignment
	void methodSet( tThreadData*, qshort );

	// EXTfldval conversions
	void getEXTfldvalForValue(tThreadData* pThreadData, EXTfldval &retVal, UInt indexValue);
	void getEXTfldvalForValue(tThreadData* pThreadData, EXTfldval &retVal, std::string keyValue);
	void getEXTfldvalForValue(tThreadData* pThreadData, EXTfldval &retVal, Json::Value* posPointer);
	
	void setValueFromEXTfldval( tThreadData*, EXTfldval& ); 
	void setValueFromEXTfldval( tThreadData*, EXTfldval&, std::string group);
	void setValueFromEXTfldval( tThreadData*, EXTfldval&, int group);
	void setValueFromParameter( tThreadData*, qshort );
};

#endif /* JSON_VALUE_HE */